{"version":3,"sources":["webpack://SlVueTree/webpack/universalModuleDefinition","webpack://SlVueTree/webpack/bootstrap","webpack://SlVueTree/./src/sl-vue-tree.js","webpack://SlVueTree/./src/sl-vue-tree.vue?75ef","webpack://SlVueTree/./src/sl-vue-tree.vue","webpack://SlVueTree/./node_modules/vue-loader/lib/runtime/component-normalizer.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","sl_vue_tree","props","type","Array","default","edgeSize","Number","showBranches","Boolean","level","parentInd","allowMultiselect","scrollAreaHeight","maxScrollSpeed","[object Object]","rootCursorPosition","scrollIntervalId","scrollSpeed","lastSelectedNode","mouseIsDown","isDragging","lastMousePos","x","y","preventDrag","currentValue","this","isRoot","document","addEventListener","onDocumentMouseupHandler","removeEventListener","watch","newValue","computed","getParent","cursorPosition","nodeModels","copy","getNodes","nodes","children","gaps","push","getSelected","length","getDraggable","methods","pos","setCursorPosition","parentPath","isVisible","map","nodeModel","ind","nodePath","concat","getNode","path","siblings","slice","getNodeSiblings","isExpanded","isDraggable","isSelectable","title","isLeaf","isSelected","data","pathStr","JSON","stringify","isFirstChild","isLastChild","getRoot","$emit","selectedNodes","event","draggingNodes","position","toggledNode","node","updateNode","preventDefault","getCursorPositionFromCoords","clientX","clientY","addToSelection","ctrlKey","selectedNode","newNodes","shiftSelectionMode","shiftKey","shiftSelectionStarted","traverse","emitInput","emitSelect","onMousemoveHandler","initialDraggingState","isDragStarted","$root","$el","rootRect","getBoundingClientRect","$dragInfo","$refs","dragInfo","dragInfoTop","top","scrollTop","style","marginBottom","dragInfoLeft","left","destNode","placement","select","scrollBottomLine","bottom","scrollDownSpeed","scrollTopLine","scrollTopSpeed","startScroll","stopScroll","$target","elementFromPoint","$nodeItem","getAttribute","closest","parse","nodeHeight","offsetHeight","offsetY","height","getLastNode","getFirstNode","querySelector","lastNode","filter","resultNode","comparePaths","prevNodes","path1","path2","button","onNodeMousedownHandler","speed","setInterval","clearInterval","onNodeMouseupHandler","targetNode","stopDrag","draggingNode","checkNodeIsParent","nodeModelsToInsert","draggingNodeModel","destSiblings","destNodeModel","unshift","insertInd","splice","traverseModels","_markToDelete","emitDrop","emitToggle","stopPropagation","$parent","patch","assign","cb","shouldStop","nodeInd","itemPath","paths","pathsStr","sourceNode","destPath","entity","render","_vm","_h","$createElement","_c","_self","staticClass","class","sl-vue-tree-root","on","mousemove","mouseleave","onMouseleaveHandler","dragend","$event","onDragendHandler","ref","_l","sl-vue-tree-selected","visibility","dragover","_v","sl-vue-tree-cursor-hover","sl-vue-tree-cursor-inside","sl-vue-tree-node-is-leaf","sl-vue-tree-node-is-folder","attrs","mousedown","mouseup","contextmenu","emitNodeContextmenu","dblclick","emitNodeDblclick","click","emitNodeClick","onExternalDragoverHandler","drop","onExternalDropHandler","gapInd","_t","_e","_s","String","fromCharCode","onToggleHandler","scopedSlots","_u","key","fn","directives","rawName","expression","selectionSize","_withStripped","Component","scriptExports","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","normalizeComponent","__file","__webpack_exports__"],"mappings":"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","file":"sl-vue-tree.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlVueTree\"] = factory();\n\telse\n\t\troot[\"SlVueTree\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\r\n    name: 'sl-vue-tree',\r\n    props: {\r\n        value: {\r\n            type: Array,\r\n            default: () => []\r\n        },\r\n        edgeSize: {\r\n            type: Number,\r\n            default: 3\r\n        },\r\n        showBranches: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        level: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        parentInd: {\r\n            type: Number\r\n        },\r\n        allowMultiselect: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        scrollAreaHeight: {\r\n            type: Number,\r\n            default: 70\r\n        },\r\n        maxScrollSpeed: {\r\n            type: Number,\r\n            default: 20\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            rootCursorPosition: null,\r\n            scrollIntervalId: 0,\r\n            scrollSpeed: 0,\r\n            lastSelectedNode: null,\r\n            mouseIsDown: false,\r\n            isDragging: false,\r\n            lastMousePos: {x: 0, y: 0},\r\n            preventDrag: false,\r\n            currentValue: this.value\r\n        };\r\n    },\r\n\r\n    mounted() {\r\n        if (this.isRoot) {\r\n            document.addEventListener('mouseup', this.onDocumentMouseupHandler);\r\n        }\r\n    },\r\n\r\n    beforeDestroy() {\r\n        document.removeEventListener('mouseup', this.onDocumentMouseupHandler);\r\n    },\r\n\r\n    watch: {\r\n        value: function (newValue) {\r\n            this.currentValue = newValue;\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        cursorPosition() {\r\n            if (this.isRoot) return this.rootCursorPosition;\r\n            return this.getParent().cursorPosition;\r\n        },\r\n\r\n        nodes() {\r\n            if (this.isRoot) {\r\n                const nodeModels = this.copy(this.currentValue);\r\n                return this.getNodes(nodeModels);\r\n            }\r\n\r\n            return this.getParent().nodes[this.parentInd].children;\r\n        },\r\n        /**\r\n         * gaps is using for nodes indentation\r\n         * @returns {number[]}\r\n         */\r\n        gaps() {\r\n            const gaps = [];\r\n            let i = this.level - 1;\r\n            if (!this.showBranches) i++;\r\n            while (i-- > 0) gaps.push(i);\r\n            return gaps;\r\n        },\r\n\r\n        isRoot() {\r\n            return !this.level\r\n        },\r\n\r\n        selectionSize() {\r\n            return this.getSelected().length;\r\n        },\r\n\r\n        dragSize() {\r\n            return this.getDraggable().length;\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        setCursorPosition(pos) {\r\n            if (this.isRoot) {\r\n                this.rootCursorPosition = pos;\r\n                return;\r\n            }\r\n            this.getParent().setCursorPosition(pos);\r\n        },\r\n\r\n        getNodes(nodeModels, parentPath = [], isVisible = true) {\r\n\r\n            return nodeModels.map((nodeModel, ind) => {\r\n                const nodePath = parentPath.concat(ind);\r\n                return this.getNode(nodePath, nodeModel, nodeModels, isVisible);\r\n            })\r\n        },\r\n\r\n        getNode(\r\n            path,\r\n            nodeModel = null,\r\n            siblings = null,\r\n            isVisible = null\r\n        ) {\r\n            const ind = path.slice(-1)[0];\r\n\r\n            // calculate nodeModel, siblings, isVisible fields if it is not passed as arguments\r\n            siblings = siblings || this.getNodeSiblings(this.currentValue, path);\r\n            nodeModel = nodeModel || (siblings && siblings[ind]) || null;\r\n\r\n            if (isVisible == null) {\r\n                isVisible = this.isVisible(path);\r\n            }\r\n\r\n            if (!nodeModel) return null;\r\n\r\n            const isExpanded = nodeModel.isExpanded == void 0 ? true : !!nodeModel.isExpanded;\r\n            const isDraggable = nodeModel.isDraggable == void 0 ? true : !!nodeModel.isDraggable;\r\n            const isSelectable = nodeModel.isSelectable == void 0 ? true : !!nodeModel.isSelectable;\r\n\r\n            const node = {\r\n\r\n                // define the all ISlTreeNodeModel props\r\n                title: nodeModel.title,\r\n                isLeaf: !!nodeModel.isLeaf,\r\n                children: nodeModel.children ? this.getNodes(nodeModel.children, path, isExpanded) : [],\r\n                isSelected: !!nodeModel.isSelected,\r\n                isExpanded,\r\n                isVisible,\r\n                isDraggable,\r\n                isSelectable,\r\n                data: nodeModel.data !== void 0 ? nodeModel.data : {},\r\n\r\n                // define the all ISlTreeNode computed props\r\n                path: path,\r\n                pathStr: JSON.stringify(path),\r\n                level: path.length,\r\n                ind,\r\n                isFirstChild: ind == 0,\r\n                isLastChild: ind === siblings.length - 1\r\n            };\r\n            return node;\r\n        },\r\n\r\n        isVisible(path) {\r\n            if (path.length < 2) return true;\r\n            let nodeModels = this.currentValue;\r\n\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n                let ind = path[i];\r\n                let nodeModel = nodeModels[ind];\r\n                let isExpanded = nodeModel.isExpanded == void 0 ? true : !!nodeModel.isExpanded;\r\n                if (!isExpanded) return false;\r\n                nodeModels = nodeModel.children;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        emitInput(newValue) {\r\n            this.currentValue = newValue;\r\n            this.getRoot().$emit('input', newValue);\r\n        },\r\n\r\n        emitSelect(selectedNodes, event) {\r\n            this.getRoot().$emit('select', selectedNodes, event);\r\n        },\r\n\r\n        emitDrop(draggingNodes, position, event) {\r\n            this.getRoot().$emit('drop', draggingNodes, position, event);\r\n        },\r\n\r\n        emitToggle(toggledNode, event) {\r\n            this.getRoot().$emit('toggle', toggledNode, event);\r\n        },\r\n\r\n        emitNodeClick(node, event) {\r\n            this.getRoot().$emit('nodeclick', node, event);\r\n        },\r\n\r\n        emitNodeDblclick(node, event) {\r\n            this.getRoot().$emit('nodedblclick', node, event);\r\n            this.updateNode(node.path, {isExpanded: !node.isExpanded});\r\n        },\r\n\r\n        emitNodeContextmenu(node, event) {\r\n            this.getRoot().$emit('nodecontextmenu', node, event);\r\n        },\r\n\r\n        onExternalDragoverHandler(node, event) {\r\n            event.preventDefault();\r\n            const root = this.getRoot();\r\n            const cursorPosition = root.getCursorPositionFromCoords(event.clientX, event.clientY);\r\n            root.setCursorPosition(cursorPosition);\r\n            root.$emit('externaldragover', cursorPosition, event);\r\n        },\r\n\r\n        onExternalDropHandler(node, event) {\r\n            const root = this.getRoot();\r\n            const cursorPosition = root.getCursorPositionFromCoords(event.clientX, event.clientY);\r\n            root.$emit('externaldrop', cursorPosition, event);\r\n            this.setCursorPosition(null);\r\n        },\r\n\r\n        select(path, addToSelection = false, event = null) {\r\n            addToSelection = ((event && event.ctrlKey) || addToSelection) && this.allowMultiselect;\r\n            const selectedNode = this.getNode(path);\r\n            if (!selectedNode) return null;\r\n            const newNodes = this.copy(this.currentValue);\r\n            const shiftSelectionMode = this.allowMultiselect && event && event.shiftKey && this.lastSelectedNode;\r\n            const selectedNodes = [];\r\n            let shiftSelectionStarted = false;\r\n\r\n            this.traverse((node, nodeModel) => {\r\n\r\n\r\n                if (shiftSelectionMode) {\r\n                    if (node.pathStr === selectedNode.pathStr || node.pathStr === this.lastSelectedNode.pathStr) {\r\n                        nodeModel.isSelected = node.isSelectable;\r\n                        shiftSelectionStarted = !shiftSelectionStarted;\r\n                    }\r\n                    if (shiftSelectionStarted) nodeModel.isSelected = node.isSelectable;\r\n                } else if (node.pathStr === selectedNode.pathStr) {\r\n                    nodeModel.isSelected = node.isSelectable;\r\n                } else if (!addToSelection) {\r\n                    if (nodeModel.isSelected) nodeModel.isSelected = false;\r\n                }\r\n\r\n                if (nodeModel.isSelected) selectedNodes.push(node);\r\n\r\n            }, newNodes);\r\n\r\n\r\n            this.lastSelectedNode = selectedNode;\r\n            this.emitInput(newNodes);\r\n            this.emitSelect(selectedNodes, event);\r\n            return selectedNode;\r\n        },\r\n\r\n        onMousemoveHandler(event) {\r\n            if (!this.isRoot) {\r\n                this.getRoot().onMousemoveHandler(event);\r\n                return;\r\n            }\r\n\r\n            if (this.preventDrag) return;\r\n\r\n            const initialDraggingState = this.isDragging;\r\n            const isDragging =\r\n                this.isDragging || (\r\n                    this.mouseIsDown &&\r\n                    (this.lastMousePos.x !== event.clientX || this.lastMousePos.y !== event.clientY)\r\n                );\r\n\r\n            const isDragStarted = initialDraggingState === false && isDragging === true;\r\n\r\n            this.lastMousePos = {\r\n                x: event.clientX,\r\n                y: event.clientY\r\n            };\r\n\r\n            if (!isDragging) return;\r\n\r\n            const $root = this.getRoot().$el;\r\n            const rootRect = $root.getBoundingClientRect();\r\n            const $dragInfo = this.$refs.dragInfo;\r\n            const dragInfoTop = (event.clientY - rootRect.top + $root.scrollTop - ($dragInfo.style.marginBottom | 0));\r\n            const dragInfoLeft = (event.clientX - rootRect.left);\r\n\r\n            $dragInfo.style.top = dragInfoTop + 'px';\r\n            $dragInfo.style.left = dragInfoLeft + 'px';\r\n\r\n            const cursorPosition = this.getCursorPositionFromCoords(event.clientX, event.clientY);\r\n            const destNode = cursorPosition.node;\r\n            const placement = cursorPosition.placement;\r\n\r\n            if (isDragStarted && !destNode.isSelected) {\r\n                this.select(destNode.path, false, event);\r\n            }\r\n\r\n            const draggableNodes = this.getDraggable();\r\n            if (!draggableNodes.length) {\r\n                this.preventDrag = true;\r\n                return;\r\n            }\r\n\r\n            this.isDragging = isDragging;\r\n\r\n            this.setCursorPosition({node: destNode, placement});\r\n\r\n            const scrollBottomLine = rootRect.bottom - this.scrollAreaHeight;\r\n            const scrollDownSpeed = (event.clientY - scrollBottomLine) / (rootRect.bottom - scrollBottomLine);\r\n            const scrollTopLine = rootRect.top + this.scrollAreaHeight;\r\n            const scrollTopSpeed = (scrollTopLine - event.clientY) / (scrollTopLine - rootRect.top);\r\n\r\n            if (scrollDownSpeed > 0) {\r\n                this.startScroll(scrollDownSpeed);\r\n            } else if (scrollTopSpeed > 0) {\r\n                this.startScroll(-scrollTopSpeed)\r\n            } else {\r\n                this.stopScroll();\r\n            }\r\n        },\r\n\r\n        getCursorPositionFromCoords(x, y) {\r\n            const $target = document.elementFromPoint(x, y);\r\n            const $nodeItem = $target.getAttribute('path') ? $target : $target.closest('[path]');\r\n            let destNode;\r\n            let placement;\r\n\r\n            if ($nodeItem) {\r\n\r\n                if (!$nodeItem) return;\r\n\r\n                destNode = this.getNode(JSON.parse($nodeItem.getAttribute('path')));\r\n\r\n                const nodeHeight = $nodeItem.offsetHeight;\r\n                const edgeSize = this.edgeSize;\r\n                const offsetY = y - $nodeItem.getBoundingClientRect().top;\r\n\r\n\r\n                if (destNode.isLeaf) {\r\n                    placement = offsetY >= nodeHeight / 2 ? 'after' : 'before';\r\n                } else {\r\n                    if (offsetY <= edgeSize) {\r\n                        placement = 'before';\r\n                    } else if (offsetY >= nodeHeight - edgeSize) {\r\n                        placement = 'after';\r\n                    } else {\r\n                        placement = 'inside';\r\n                    }\r\n                }\r\n            } else {\r\n                const $root = this.getRoot().$el;\r\n                const rootRect = $root.getBoundingClientRect();\r\n                if (y > rootRect.top + (rootRect.height / 2)) {\r\n                    placement = 'after';\r\n                    destNode = this.getLastNode();\r\n                } else {\r\n                    placement = 'before';\r\n                    destNode = this.getFirstNode();\r\n                }\r\n            }\r\n\r\n            return {node: destNode, placement};\r\n        },\r\n\r\n        onMouseleaveHandler(event) {\r\n            if (!this.isRoot || !this.isDragging) return;\r\n            const $root = this.getRoot().$el;\r\n            const rootRect = $root.getBoundingClientRect();\r\n            if (event.clientY >= rootRect.bottom) {\r\n                this.setCursorPosition({node: this.nodes.slice(-1)[0], placement: 'after'});\r\n            } else if (event.clientY < rootRect.top) {\r\n                this.setCursorPosition({node: this.getFirstNode(), placement: 'before'});\r\n            }\r\n        },\r\n\r\n        getNodeEl(path) {\r\n            this.getRoot().$el.querySelector(`[path=\"${JSON.stringify(path)}\"]`);\r\n        },\r\n\r\n        getLastNode() {\r\n            let lastNode = null;\r\n            this.traverse((node) => {\r\n                lastNode = node;\r\n            });\r\n            return lastNode;\r\n        },\r\n\r\n        getFirstNode() {\r\n            return this.getNode([0]);\r\n        },\r\n\r\n        getNextNode(path, filter = null) {\r\n\r\n            let resultNode = null;\r\n\r\n            this.traverse((node) => {\r\n                if (this.comparePaths(node.path, path) < 1) return;\r\n\r\n                if (!filter || filter(node)) {\r\n                    resultNode = node;\r\n                    return false; // stop traverse\r\n                }\r\n\r\n            });\r\n\r\n            return resultNode;\r\n        },\r\n\r\n        getPrevNode(path, filter) {\r\n            let prevNodes = [];\r\n\r\n            this.traverse((node) => {\r\n                if (this.comparePaths(node.path, path) >= 0) {\r\n                    return false;\r\n                }\r\n                prevNodes.push(node);\r\n            });\r\n\r\n            let i = prevNodes.length;\r\n            while (i--) {\r\n                const node = prevNodes[i];\r\n                if (!filter || filter(node)) return node;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * returns 1 if path1 > path2\r\n         * returns -1 if path1 < path2\r\n         * returns 0 if path1 == path2\r\n         *\r\n         * examples\r\n         *\r\n         * [1, 2, 3] < [1, 2, 4]\r\n         * [1, 1, 3] < [1, 2, 3]\r\n         * [1, 2, 3] > [1, 2, 0]\r\n         * [1, 2, 3] > [1, 1, 3]\r\n         * [1, 2] < [1, 2, 0]\r\n         *\r\n         */\r\n        comparePaths(path1, path2) {\r\n            for (let i = 0; i < path1.length; i++) {\r\n                if (path2[i] == void 0) return 1;\r\n                if (path1[i] > path2[i]) return 1;\r\n                if (path1[i] < path2[i]) return -1;\r\n            }\r\n            return path2[path1.length] == void 0 ? 0 : -1;\r\n        },\r\n\r\n        onNodeMousedownHandler(event, node) {\r\n            // handle only left mouse button\r\n            if (event.button !== 0) return;\r\n\r\n            if (!this.isRoot) {\r\n                this.getRoot().onNodeMousedownHandler(event, node);\r\n                return;\r\n            }\r\n            this.mouseIsDown = true;\r\n        },\r\n\r\n\r\n        startScroll(speed) {\r\n            const $root = this.getRoot().$el;\r\n            if (this.scrollSpeed === speed) {\r\n                return;\r\n            } else if (this.scrollIntervalId) {\r\n                this.stopScroll();\r\n            }\r\n\r\n            this.scrollSpeed = speed;\r\n            this.scrollIntervalId = setInterval(() => {\r\n                $root.scrollTop += this.maxScrollSpeed * speed;\r\n            }, 20);\r\n        },\r\n\r\n        stopScroll() {\r\n            clearInterval(this.scrollIntervalId);\r\n            this.scrollIntervalId = 0;\r\n            this.scrollSpeed = 0;\r\n        },\r\n\r\n        onDocumentMouseupHandler(event) {\r\n            if (this.isDragging) this.onNodeMouseupHandler(event);\r\n        },\r\n\r\n        onNodeMouseupHandler(event, targetNode = null) {\r\n\r\n            // handle only left mouse button\r\n            if (event.button !== 0) return;\r\n\r\n            if (!this.isRoot) {\r\n                this.getRoot().onNodeMouseupHandler(event, targetNode);\r\n                return;\r\n            }\r\n\r\n            this.mouseIsDown = false;\r\n\r\n            if (!this.isDragging && targetNode && !this.preventDrag) {\r\n                this.select(targetNode.path, false, event);\r\n            }\r\n\r\n            this.preventDrag = false;\r\n\r\n            if (!this.cursorPosition) {\r\n                this.stopDrag();\r\n                return;\r\n            }\r\n            ;\r\n\r\n\r\n            const draggingNodes = this.getDraggable();\r\n\r\n            // check that nodes is possible to insert\r\n            for (let draggingNode of draggingNodes) {\r\n                if (draggingNode.pathStr == this.cursorPosition.node.pathStr) {\r\n                    this.stopDrag();\r\n                    return;\r\n                }\r\n\r\n                if (this.checkNodeIsParent(draggingNode, this.cursorPosition.node)) {\r\n                    this.stopDrag();\r\n                    return;\r\n                }\r\n                ;\r\n            }\r\n\r\n            const newNodes = this.copy(this.currentValue);\r\n            const nodeModelsToInsert = [];\r\n\r\n            // find and mark dragging model to delete\r\n            for (let draggingNode of draggingNodes) {\r\n                const sourceSiblings = this.getNodeSiblings(newNodes, draggingNode.path);\r\n                const draggingNodeModel = sourceSiblings[draggingNode.ind];\r\n                nodeModelsToInsert.push(this.copy(draggingNodeModel));\r\n                draggingNodeModel['_markToDelete'] = true;\r\n            }\r\n\r\n\r\n            // insert dragging nodes to the new place\r\n            const destNode = this.cursorPosition.node;\r\n            const destSiblings = this.getNodeSiblings(newNodes, destNode.path);\r\n            const destNodeModel = destSiblings[destNode.ind];\r\n\r\n            if (this.cursorPosition.placement === 'inside') {\r\n                destNodeModel.children = destNodeModel.children || [];\r\n                destNodeModel.children.unshift(...nodeModelsToInsert);\r\n            } else {\r\n                const insertInd = this.cursorPosition.placement === 'before' ?\r\n                    destNode.ind :\r\n                    destNode.ind + 1;\r\n\r\n                destSiblings.splice(insertInd, 0, ...nodeModelsToInsert);\r\n            }\r\n\r\n\r\n            // delete dragging node from the old place\r\n            this.traverseModels((nodeModel, siblings, ind) => {\r\n                if (!nodeModel._markToDelete) return;\r\n                siblings.splice(ind, 1);\r\n            }, newNodes);\r\n\r\n\r\n            this.lastSelectedNode = null;\r\n            this.emitInput(newNodes);\r\n            this.emitDrop(draggingNodes, this.cursorPosition, event);\r\n            this.stopDrag();\r\n        },\r\n\r\n\r\n        onToggleHandler(event, node) {\r\n            this.updateNode(node.path, {isExpanded: !node.isExpanded});\r\n            this.emitToggle(node, event);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        stopDrag() {\r\n            this.isDragging = false;\r\n            this.mouseIsDown = false;\r\n            this.setCursorPosition(null);\r\n            this.stopScroll();\r\n        },\r\n\r\n\r\n        getParent() {\r\n            return this.$parent;\r\n        },\r\n\r\n        getRoot() {\r\n            if (this.isRoot) return this;\r\n            return this.getParent().getRoot();\r\n        },\r\n\r\n        getNodeSiblings(nodes, path) {\r\n            if (path.length === 1) return nodes;\r\n            return this.getNodeSiblings(nodes[path[0]].children, path.slice(1));\r\n        },\r\n\r\n\r\n        updateNode(path, patch) {\r\n            if (!this.isRoot) {\r\n                this.getParent().updateNode(path, patch);\r\n                return;\r\n            }\r\n\r\n            const pathStr = JSON.stringify(path);\r\n            const newNodes = this.copy(this.currentValue);\r\n            this.traverse((node, nodeModel) => {\r\n                if (node.pathStr !== pathStr) return;\r\n                Object.assign(nodeModel, patch);\r\n            }, newNodes);\r\n\r\n            this.emitInput(newNodes);\r\n        },\r\n\r\n        getSelected() {\r\n            const selectedNodes = [];\r\n            this.traverse((node) => {\r\n                if (node.isSelected) selectedNodes.push(node);\r\n            });\r\n            return selectedNodes;\r\n        },\r\n\r\n        getDraggable() {\r\n            const selectedNodes = [];\r\n            this.traverse((node) => {\r\n                if (node.isSelected && node.isDraggable) selectedNodes.push(node);\r\n            });\r\n            return selectedNodes;\r\n        },\r\n\r\n\r\n        traverse(\r\n            cb,\r\n            nodeModels = null,\r\n            parentPath = []\r\n        ) {\r\n            if (!nodeModels) nodeModels = this.currentValue;\r\n\r\n            let shouldStop = false;\r\n\r\n            const nodes = [];\r\n\r\n            for (let nodeInd = 0; nodeInd < nodeModels.length; nodeInd++) {\r\n                const nodeModel = nodeModels[nodeInd];\r\n                const itemPath = parentPath.concat(nodeInd);\r\n                const node = this.getNode(itemPath, nodeModel, nodeModels);\r\n                shouldStop = cb(node, nodeModel, nodeModels) === false;\r\n                nodes.push(node);\r\n\r\n                if (shouldStop) break;\r\n\r\n                if (nodeModel.children) {\r\n                    shouldStop = this.traverse(cb, nodeModel.children, itemPath) === false;\r\n                    if (shouldStop) break;\r\n                }\r\n            }\r\n\r\n            return !shouldStop ? nodes : false;\r\n        },\r\n\r\n        traverseModels(cb, nodeModels) {\r\n            let i = nodeModels.length;\r\n            while (i--) {\r\n                const nodeModel = nodeModels[i];\r\n                if (nodeModel.children) this.traverseModels(cb, nodeModel.children);\r\n                cb(nodeModel, nodeModels, i);\r\n            }\r\n            return nodeModels;\r\n        },\r\n\r\n        remove(paths) {\r\n            const pathsStr = paths.map(path => JSON.stringify(path));\r\n            const newNodes = this.copy(this.currentValue);\r\n            this.traverse((node, nodeModel, siblings) => {\r\n                for (const pathStr of pathsStr) {\r\n                    if (node.pathStr === pathStr) nodeModel._markToDelete = true;\r\n                }\r\n            }, newNodes);\r\n\r\n            this.traverseModels((nodeModel, siblings, ind) => {\r\n                if (!nodeModel._markToDelete) return;\r\n                siblings.splice(ind, 1);\r\n            }, newNodes);\r\n\r\n            this.emitInput(newNodes);\r\n        },\r\n\r\n        checkNodeIsParent(sourceNode, destNode) {\r\n            const destPath = destNode.path;\r\n            return JSON.stringify(destPath.slice(0, sourceNode.path.length)) == sourceNode.pathStr;\r\n        },\r\n\r\n        copy(entity) {\r\n            return JSON.parse(JSON.stringify(entity));\r\n        }\r\n\r\n    }\r\n};\r\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"sl-vue-tree\",\n      class: { \"sl-vue-tree-root\": _vm.isRoot },\n      on: {\n        mousemove: _vm.onMousemoveHandler,\n        mouseleave: _vm.onMouseleaveHandler,\n        dragend: function($event) {\n          _vm.onDragendHandler(null, $event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        { ref: \"nodes\", staticClass: \"sl-vue-tree-nodes-list\" },\n        [\n          _vm._l(_vm.nodes, function(node, nodeInd) {\n            return _c(\n              \"div\",\n              {\n                staticClass: \"sl-vue-tree-node\",\n                class: { \"sl-vue-tree-selected\": node.isSelected }\n              },\n              [\n                _c(\"div\", {\n                  staticClass: \"sl-vue-tree-cursor sl-vue-tree-cursor_before\",\n                  style: {\n                    visibility:\n                      _vm.cursorPosition &&\n                      _vm.cursorPosition.node.pathStr === node.pathStr &&\n                      _vm.cursorPosition.placement === \"before\"\n                        ? \"visible\"\n                        : \"hidden\"\n                  },\n                  on: {\n                    dragover: function($event) {\n                      $event.preventDefault()\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  {\n                    staticClass: \"sl-vue-tree-node-item\",\n                    class: {\n                      \"sl-vue-tree-cursor-hover\":\n                        _vm.cursorPosition &&\n                        _vm.cursorPosition.node.pathStr === node.pathStr,\n\n                      \"sl-vue-tree-cursor-inside\":\n                        _vm.cursorPosition &&\n                        _vm.cursorPosition.placement === \"inside\" &&\n                        _vm.cursorPosition.node.pathStr === node.pathStr,\n                      \"sl-vue-tree-node-is-leaf\": node.isLeaf,\n                      \"sl-vue-tree-node-is-folder\": !node.isLeaf\n                    },\n                    attrs: { path: node.pathStr },\n                    on: {\n                      mousedown: function($event) {\n                        _vm.onNodeMousedownHandler($event, node)\n                      },\n                      mouseup: function($event) {\n                        _vm.onNodeMouseupHandler($event, node)\n                      },\n                      contextmenu: function($event) {\n                        _vm.emitNodeContextmenu(node, $event)\n                      },\n                      dblclick: function($event) {\n                        _vm.emitNodeDblclick(node, $event)\n                      },\n                      click: function($event) {\n                        _vm.emitNodeClick(node, $event)\n                      },\n                      dragover: function($event) {\n                        _vm.onExternalDragoverHandler(node, $event)\n                      },\n                      drop: function($event) {\n                        _vm.onExternalDropHandler(node, $event)\n                      }\n                    }\n                  },\n                  [\n                    _vm._l(_vm.gaps, function(gapInd) {\n                      return _c(\"div\", { staticClass: \"sl-vue-tree-gap\" })\n                    }),\n                    _vm._v(\" \"),\n                    _vm.level && _vm.showBranches\n                      ? _c(\n                          \"div\",\n                          { staticClass: \"sl-vue-tree-branch\" },\n                          [\n                            _vm._t(\n                              \"branch\",\n                              [\n                                !node.isLastChild\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n            \" +\n                                          _vm._s(String.fromCharCode(0x251c)) +\n                                          _vm._s(String.fromCharCode(0x2500)) +\n                                          \" \\n          \"\n                                      )\n                                    ])\n                                  : _vm._e(),\n                                _vm._v(\" \"),\n                                node.isLastChild\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n            \" +\n                                          _vm._s(String.fromCharCode(0x2514)) +\n                                          _vm._s(String.fromCharCode(0x2500)) +\n                                          \" \\n          \"\n                                      )\n                                    ])\n                                  : _vm._e()\n                              ],\n                              { node: node }\n                            )\n                          ],\n                          2\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _c(\n                      \"div\",\n                      { staticClass: \"sl-vue-tree-title\" },\n                      [\n                        !node.isLeaf\n                          ? _c(\n                              \"span\",\n                              {\n                                staticClass: \"sl-vue-tree-toggle\",\n                                on: {\n                                  click: function($event) {\n                                    _vm.onToggleHandler($event, node)\n                                  }\n                                }\n                              },\n                              [\n                                _vm._t(\n                                  \"toggle\",\n                                  [\n                                    _c(\"span\", [\n                                      _vm._v(\n                                        \"\\n             \" +\n                                          _vm._s(\n                                            !node.isLeaf\n                                              ? node.isExpanded\n                                                ? \"-\"\n                                                : \"+\"\n                                              : \"\"\n                                          ) +\n                                          \"\\n            \"\n                                      )\n                                    ])\n                                  ],\n                                  { node: node }\n                                )\n                              ],\n                              2\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm._t(\"title\", [_vm._v(_vm._s(node.title))], {\n                          node: node\n                        })\n                      ],\n                      2\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"div\",\n                      { staticClass: \"sl-vue-tree-sidebar\" },\n                      [_vm._t(\"sidebar\", null, { node: node })],\n                      2\n                    )\n                  ],\n                  2\n                ),\n                _vm._v(\" \"),\n                node.children && node.children.length && node.isExpanded\n                  ? _c(\"sl-vue-tree\", {\n                      attrs: {\n                        value: node.children,\n                        level: node.level,\n                        parentInd: nodeInd,\n                        allowMultiselect: _vm.allowMultiselect,\n                        edgeSize: _vm.edgeSize,\n                        showBranches: _vm.showBranches\n                      },\n                      on: {\n                        dragover: function($event) {\n                          $event.preventDefault()\n                        }\n                      },\n                      scopedSlots: _vm._u([\n                        {\n                          key: \"title\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [\n                              _vm._t(\"title\", [_vm._v(_vm._s(node.title))], {\n                                node: node\n                              })\n                            ]\n                          }\n                        },\n                        {\n                          key: \"toggle\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [\n                              _vm._t(\n                                \"toggle\",\n                                [\n                                  _c(\"span\", [\n                                    _vm._v(\n                                      \"\\n             \" +\n                                        _vm._s(\n                                          !node.isLeaf\n                                            ? node.isExpanded\n                                              ? \"-\"\n                                              : \"+\"\n                                            : \"\"\n                                        ) +\n                                        \"\\n          \"\n                                    )\n                                  ])\n                                ],\n                                { node: node }\n                              )\n                            ]\n                          }\n                        },\n                        {\n                          key: \"sidebar\",\n                          fn: function(ref) {\n                            var node = ref.node\n                            return [_vm._t(\"sidebar\", null, { node: node })]\n                          }\n                        }\n                      ])\n                    })\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"div\", {\n                  staticClass: \"sl-vue-tree-cursor sl-vue-tree-cursor_after\",\n                  style: {\n                    visibility:\n                      _vm.cursorPosition &&\n                      _vm.cursorPosition.node.pathStr === node.pathStr &&\n                      _vm.cursorPosition.placement === \"after\"\n                        ? \"visible\"\n                        : \"hidden\"\n                  },\n                  on: {\n                    dragover: function($event) {\n                      $event.preventDefault()\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          }),\n          _vm._v(\" \"),\n          _vm.isRoot\n            ? _c(\n                \"div\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.isDragging,\n                      expression: \"isDragging\"\n                    }\n                  ],\n                  ref: \"dragInfo\",\n                  staticClass: \"sl-vue-tree-drag-info\"\n                },\n                [\n                  _vm._t(\"draginfo\", [\n                    _vm._v(\n                      \"\\n        Items: \" +\n                        _vm._s(_vm.selectionSize) +\n                        \"\\n      \"\n                    )\n                  ])\n                ],\n                2\n              )\n            : _vm._e()\n        ],\n        2\n      )\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\nexport { render, staticRenderFns }\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-0b7c263a\", { render: render, staticRenderFns: staticRenderFns })\n  }\n}","var disposed = false\n/* script */\nexport * from \"!!!./sl-vue-tree.js\"\nimport __vue_script__ from \"!!!./sl-vue-tree.js\"/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0b7c263a\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./sl-vue-tree.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src\\\\sl-vue-tree.vue\"\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-0b7c263a\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-0b7c263a\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nexport default Component.exports\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n"],"sourceRoot":""}